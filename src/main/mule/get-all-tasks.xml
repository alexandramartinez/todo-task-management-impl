<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:db="http://www.mulesoft.org/schema/mule/db"
      xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
                          http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
                          http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <sub-flow name="get-all-tasks-flow" doc:id="6fdbaf16-63a8-4a6f-838f-802efd09e317">
        <logger level="INFO" doc:name="Start - Get All Tasks" message="Starting get all tasks flow with query params: #[attributes.queryParams]"/>
        
        <!-- Prepare query based on filter parameters -->
        <ee:transform doc:name="Prepare Query">
            <ee:message />
            <ee:variables>
                <ee:set-variable variableName="whereClause"><![CDATA[%dw 2.0
output application/java
var completedParam = attributes.queryParams.completed
var dueDateParam = attributes.queryParams.dueDate
var conditions = []

fun addCondition(condition) = 
    if (condition != null) 
        conditions << condition
    else 
        conditions

if (completedParam != null)
    addCondition("completed = " ++ completedParam)
else 
    conditions

if (dueDateParam != null)
    addCondition("dueDate = '" ++ dueDateParam ++ "'")
else 
    conditions

var whereClauseStr = 
    if (sizeOf(conditions) > 0) 
        " WHERE " ++ (conditions joinBy " AND ")
    else 
        ""
---
whereClauseStr
]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        
        <!-- Execute query with dynamic where clause -->
        <db:select doc:name="Select Tasks" config-ref="mysql-db-config">
            <db:sql><![CDATA[SELECT id, title, description, dueDate, completed FROM tasks$(vars.whereClause)]]></db:sql>
        </db:select>
        
        <!-- Transform database result to API response format -->
        <ee:transform doc:name="Transform to API Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload map {
    id: $.id as String,
    title: $.title,
    description: $.description,
    dueDate: $.dueDate,
    completed: $.completed
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        
        <logger level="INFO" doc:name="End - Get All Tasks" message="Completed get all tasks flow, returning #[sizeOf(payload)] tasks"/>
    </sub-flow>
    
</mule>